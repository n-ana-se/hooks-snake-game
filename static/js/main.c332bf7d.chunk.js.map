{"version":3,"sources":["utils/index.js","constants/index.js","components/Navigation.js","components/Field.js","components/Button.js","components/ManipulationPanel.js","hooks/useSnakeGame.js","App.js","reportWebVitals.js","index.js"],"names":["getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","fields","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","OppositeDirection","Delta","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","column","Button","status","onStart","onStop","onRestart","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","timer","unsubscribe","clearInterval","useSnakeGame","useState","setFields","body","setBody","setStatus","direction","setDirection","setDifficulty","tick","setTick","useEffect","setInterval","handleMoving","updateDirection","useCallback","newDirection","updateDifficulty","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","delta","newPosition","position","isCollision","isEatingMyself","newBody","removingTrack","pop","unshift","start","stop","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c332bf7d.chunk.js","sourcesContent":["export const getFoodPosition = (fieldSize, excludes) => {\n    while(true) {\n        const x = Math.floor(Math.random() * (fieldSize - 2)) + 1\n        const y = Math.floor(Math.random() * (fieldSize - 2)) + 1\n        const conflict = excludes.some(item => item.x === x && item.y === y)//[snake]の中の一つとでもかぶればtrueが返り、random関数が走る\n        if (!conflict) {\n            return { x, y }\n        }\n    }\n}\n\nexport const initFields = (fieldSize, snake) => {\n    const fields = []\n    for (let i = 0; i < fieldSize; i++) {\n        const cols = new Array(fieldSize).fill('')\n        fields.push(cols)\n    }\n\n    fields[snake.y][snake.x] = 'snake'\n\n    const food = getFoodPosition(fieldSize, [snake])\n    fields[food.y][food.x] = 'food'\n\n    return fields\n}\n\nexport const isCollision = (fieldSize, position) => {\n    if (position.y < 0 || position.x < 0) {\n        return true\n    }\n    if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n        return true\n    }\n    return false\n}\n\nexport const isEatingMyself = (fields, position) => {\n    return fields[position.y][position.x] === 'snake'\n}","import { initFields } from \"../utils\";\n\nconst fieldSize = 35\nexport const initialPosition = { x: 17, y: 17 }\nexport const initialValues = initFields(fieldSize, initialPosition)\nexport const defaultInterval = 100\nexport const defaultDifficulty = 3\n\nexport const Difficulty = [1000, 500, 100, 50, 10]\n\nexport const GameStatus = Object.freeze({\n    init: 'init',\n    playing: 'playing',\n    suspended: 'suspended',\n    gameover: 'gameover'\n})\n\nexport const Direction = Object.freeze({\n    up: 'up',\n    right: 'right',\n    left: 'left',\n    down: 'down'\n})\n\nexport const DirectionKeyCodeMap = Object.freeze({\n    37: Direction.left,\n    38: Direction.up,\n    39: Direction.right,\n    40: Direction.down\n})\n\nexport const OppositeDirection = Object.freeze({\n    up: 'down',\n    right: 'left',\n    left: 'left',\n    down: 'up'\n})\n\nexport const Delta = Object.freeze({\n    up: { x: 0, y: -1 },\n    right: { x: 1, y: 0 },\n    left: { x: -1, y: 0 },\n    down: { x: 0, y: 1 }\n})","import React from 'react'\nimport { defaultDifficulty, Difficulty } from '../constants'\n\nconst Navigation = ({ length, difficulty = defaultDifficulty, onChangeDifficulty }) => {\n    const upVisibility = difficulty < Difficulty.length ? '' : 'is-hidden'\n    const downVisibility = difficulty > 1 ? '' : 'is-hidden'\n    const onUpDifficulty = () => onChangeDifficulty(difficulty + 1)\n    const onDownDifficulty = () => onChangeDifficulty(difficulty - 1)\n    return (\n        <div className=\"navigation\">\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">length: </span>\n                <div className=\"navigation-item-number-container\">\n                    <div className=\"num-board\">{length}</div>\n                </div>\n            </div>\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">Difficultuy: </span>\n                <div className=\"navigation-item-number-container\">\n                    <span className=\"num-board\">{difficulty}</span>\n                    <div className=\"difficulty-button-container\">\n                        <div\n                            className={`difficulty-button difficulty-up ${upVisibility}`}\n                            onClick={onUpDifficulty}\n                        ></div>\n                        <div\n                            className={`difficulty-button difficulty-down ${downVisibility}`}\n                            onClick={onDownDifficulty}\n                        ></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Navigation","import React from 'react'\n\nconst Field = ({ fields }) => {\n    return (\n        <div className=\"field\">\n            {\n                fields.map((row) => {\n                    return row.map((column) => {\n                        return <div className={`dots ${column}`}></div>\n                    })\n                })\n            }\n        </div>\n    )\n}\n\nexport default Field","import React from 'react'\nimport { GameStatus } from '../constants'\n\nconst Button = ({ status, onStart, onStop, onRestart }) => {\n    return (\n        <div className=\"button\">\n            { status === GameStatus.gameover && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button> }\n            { status === GameStatus.init && <button className=\"btn btn-init\" onClick={onStart}>start</button> }\n            { status === GameStatus.suspended && <button className=\"btn btn-suspended\" onClick={onStart}>start</button> }\n            { status === GameStatus.playing && <button className=\"btn btn-playing\" onClick={onStop}>stop</button> }\n        </div>\n    )\n}\n\nexport default Button","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faArrowLeft,\n    faArrowUp,\n    faArrowDown,\n    faArrowRight\n} from '@fortawesome/free-solid-svg-icons'\nimport { Direction } from '../constants'\n\nconst ManipulationPanel = ({ onChange }) => {\n    const onUp = () => onChange(Direction.up)\n    const onRight = () => onChange(Direction.right)\n    const onLeft = () => onChange(Direction.left)\n    const onDown = () => onChange(Direction.down)\n    return (\n        <div className=\"manipulation-panel\">\n            <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n                <FontAwesomeIcon icon={faArrowLeft}></FontAwesomeIcon>\n            </button>\n            <div>\n                <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n                    <FontAwesomeIcon icon={faArrowUp}></FontAwesomeIcon>\n                </button>\n                <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n                    <FontAwesomeIcon icon={faArrowDown}></FontAwesomeIcon>\n                </button>\n            </div>\n            <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n                <FontAwesomeIcon icon={faArrowRight}></FontAwesomeIcon>\n            </button>\n        </div>\n    )\n}\n\n　export default ManipulationPanel","import { useCallback, useState, useEffect } from 'react'\nimport {\n    defaultInterval,\n    defaultDifficulty,\n    Delta,\n    Difficulty,\n    Direction,\n    DirectionKeyCodeMap,\n    GameStatus,\n    OppositeDirection,\n    initialPosition,\n    initialValues\n} from '../constants'\nimport {\n    initFields,\n    isCollision,\n    isEatingMyself,\n    getFoodPosition\n} from '../utils'\n\nlet timer = null\n\nconst unsubscribe = () => {\n    if (!timer) {//timerに値が入ってるときにtrue,入ってないときにfalseとなる\n        return\n    }\n    clearInterval(timer)\n}\n\nconst useSnakeGame = () => {\n    const [fields, setFields] = useState(initialValues)//初期の二次元配列の任意のところだけ更新されていく\n    const [body, setBody] = useState([])\n    const [status, setStatus] = useState(GameStatus.init)//gameの状態\n    const [direction, setDirection] = useState(Direction.up)\n    const [difficulty, setDifficulty] = useState(defaultDifficulty)\n    const [tick, setTick] = useState(0)\n    \n    useEffect(() => {//レンダリング後に実行される関数(初回も)\n        setBody([initialPosition])//初回、毎回のレンダリング後、蛇の位置が真ん中になる\n        const interval = Difficulty[difficulty - 1]\n        timer = setInterval(() => {\n            setTick((tick) => tick + 1)\n        }, interval)\n        return unsubscribe\n    }, [difficulty])\n    \n    useEffect(() => {//レンダリング後に実行される関数(初回も)\n        if (!body.length === 0 || status !== GameStatus.playing) {\n            return\n        }\n        const canContinue = handleMoving()\n        if (!canContinue) {\n            unsubscribe()\n            setStatus(GameStatus.gameover)\n        }\n    }, [tick])//timerで100msごとに[tick]の値が一つ増えて、その都度useEffectが動く\n    const start = () => setStatus(GameStatus.playing)\n    \n    const stop = () => setStatus(GameStatus.suspended)\n    \n    const reload = () => {\n        timer = setInterval(() => {\n            setTick(tick => tick + 1)\n        }, defaultInterval)\n        setDirection(Direction.up)//最初に上に行くようにするやつ\n        setStatus(GameStatus.init)\n        setBody([initialPosition])\n        setFields(initFields(35, initialPosition))//fieldsの初期化\n    }\n    \n    const updateDirection = useCallback((newDirection) => {//わからん,manipulationpanelも\n        if (status !== GameStatus.playing) {\n            return\n        }\n        if (OppositeDirection[direction] === newDirection) {\n            return\n        }\n        setDirection(newDirection)\n    }, [direction, status])\n    \n    const updateDifficulty = useCallback((difficulty) => {\n        if (status !== GameStatus.init) {\n            return\n        }\n        if (difficulty < 1 || difficulty > Difficulty.length) {\n            return\n        }\n        setDifficulty(difficulty)\n    }, [status, difficulty])\n    \n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            const newDirection = DirectionKeyCodeMap[e.keyCode]//keyCodeは実際にキーボードから入力された番号\n            if (!newDirection) {\n                return\n            }\n            updateDirection(newDirection)\n        }\n        document.addEventListener('keydown', handleKeyDown)\n        return () => document.removeEventListener('keydown', handleKeyDown)\n    }, [updateDirection])\n    \n    const handleMoving = () => {\n        const { x, y } = body[0]\n        const delta = Delta[direction]\n        const newPosition = {\n            x: x + delta.x,\n            y: y + delta.y\n        }\n        if (isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)) {\n            return false\n        }\n        const newBody = [...body]\n        if (fields[newPosition.y][newPosition.x] !== 'food') {\n            const removingTrack = newBody.pop()//pop: 末尾の配列を抜き出して削除\n            fields[removingTrack.y][removingTrack.x] = ''\n        } else {//foodだった時\n            const food = getFoodPosition(fields.length, [...newBody, newPosition])\n            fields[food.y][food.x] = 'food'\n        }\n        fields[newPosition.y][newPosition.x] = 'snake'\n        newBody.unshift(newPosition)//unshift: 配列の先頭に要素を追加\n        setBody(newBody)\n        setFields(fields)\n        return true\n    }\n\n    return {\n        body,\n        difficulty,\n        fields,\n        start,\n        stop,\n        reload,\n        status,\n        updateDirection,\n        updateDifficulty\n    }\n}\n\n\nexport default useSnakeGame","import React from 'react'\nimport Navigation from './components/Navigation'\nimport Field from './components/Field'\nimport Button from './components/Button'\nimport ManipulationPanel from './components/ManipulationPanel'\nimport useSnakeGame from './hooks/useSnakeGame'\n\nfunction App() {\n  const {\n    body,\n    difficulty,\n    fields,\n    start,\n    stop,\n    reload,\n    status,\n    updateDirection,\n    updateDifficulty\n  } = useSnakeGame()\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={updateDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStart={start}\n          onStop={stop}\n          onRestart={reload}\n        />\n        <ManipulationPanel onChange={updateDirection} />\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}